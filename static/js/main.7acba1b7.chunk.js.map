{"version":3,"sources":["components/Preloader/Preloader.js","data/constants/constants.js","data/news-api/request.js","components/CategoryTabs/CategoryTabs.js","components/Content/Content.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Preloader","_ref","msg","loaderClassType","isSpinner","react_default","a","createElement","className","newsData","loaderMsg","greeting","spinner","error","loadCategory","Object","asyncToGenerator","regenerator_default","mark","_callee","category","requestUrl","result","wrap","_context","prev","next","fetch","then","response","json","sent","abrupt","articles","stop","this","_x","apply","arguments","CategoryTabs","currentTab","setTab","CATEGORIES","map","checkSelected","key","concat","onClick","Content","data","item","timestamp","Date","publishedAt","day","getDate","month","getMonth","year","getFullYear","urlToImage","title","author","url","source","name","style","backgroundImage","href","target","rel","App","state","isLoading","_this","setState","catch","firstTab","_this$state","components_Preloader_Preloader","Fragment","components_CategoryTabs_CategoryTabs","components_Content_Content","Component","Boolean","window","location","hostname","match","wrapper","document","getElementById","ReactDOM","render","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7acba1b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Preloader = ({msg, isSpinner}) => {\n    let loaderClassType = isSpinner ? \"loader\" : \"msg\";\n\n    return (\n        <div className=\"preloader\">\n            <span className={loaderClassType}>\n                {msg}\n            </span>\n        </div>\n    )\n};\n\nexport default Preloader;","export const newsData = {\n    URL: \"https://newsapi.org/v2/top-headlines?\",\n    COUNTRY_Q: \"country=\",\n    COUNTRY: \"us\",\n    CATEGORY_Q: \"&category=\",\n    CATEGORIES: ['technology', 'science', 'entertainment', 'health'],\n    KEY_Q: \"&apiKey=\",\n    MY_KEY: \"45ccda2e9ee14d229bab50fe6b1808b5\"\n};\n\nexport const loaderMsg = {\n    greeting: \"welcome...\",\n    spinner: \"8)\",\n    error: \"Houston, we have a problem... Please try later\"\n};","import { newsData } from '../constants/constants';\n\nexport const loadCategory = async (category) => {\n    const newsApiUrl = newsData.URL;\n    const countryQuery = newsData.COUNTRY_Q + newsData.COUNTRY;\n    const categoryQuery = newsData.CATEGORY_Q + category;\n    const keyQuery = newsData.KEY_Q + newsData.MY_KEY;\n    const requestUrl = newsApiUrl + countryQuery + categoryQuery + keyQuery;\n    const result = await fetch(requestUrl).then(response => response.json());\n\n    return result.articles;\n};","import React from 'react';\nimport { newsData } from '../../data/constants/constants';\n\nconst CategoryTabs = ({ currentTab, setTab }) => {\n    const {CATEGORIES} = newsData;\n\n    return <div className=\"tabs\">\n        {\n            CATEGORIES.map(category => {\n                let checkSelected = currentTab === category ? 'selected' : '';\n\n                return (\n                    <div key={category} className={`tab ${checkSelected}`} onClick={setTab(category)}>\n                        {category}\n                    </div>\n                )\n            })\n        }\n    </div>\n};\n\nexport default CategoryTabs;","import React from 'react';\n\nconst Content = ({ data }) => {\n    if (data) {\n        return (\n            <main className=\"content\">\n                {\n                    data.map(item => {\n                        const timestamp = new Date(item.publishedAt);\n                        const day = timestamp.getDate();\n                        const month = timestamp.getMonth();\n                        const year = timestamp.getFullYear();\n\n                        if (item.publishedAt !== null &&\n                            item.urlToImage !== null &&\n                            item.title !== null &&\n                            item.author !== null &&\n                            item.author !== '' &&\n                            item.url !== null &&\n                            item.source.name !== null) {\n\n                            return (\n                                <article key={item.title}\n                                         className=\"news-item\"\n                                         style={{backgroundImage: `url(${item.urlToImage})`}}>\n\n                                    <p className=\"news-date\">{day}/{month}/{year}</p>\n                                    <h2>{item.title}</h2>\n                                    <p className=\"news-author\">author: {item.author}</p>\n                                    <p className=\"news-source\">source:\n                                        <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            {item.source.name}\n                                        </a>\n                                    </p>\n\n                                </article>\n                            )\n                        } else {\n                            return null;\n                        }\n                    })\n                }\n            </main>\n        )\n    }\n};\n\nexport default Content;","import React, {Component} from 'react';\nimport Preloader from '../Preloader/Preloader';\nimport { newsData, loaderMsg } from '../../data/constants/constants';\nimport {loadCategory} from '../../data/news-api/request';\nimport CategoryTabs from '../CategoryTabs/CategoryTabs';\nimport Content from '../Content/Content';\n\nexport default class App extends Component {\n\n    state = {\n        currentTab: null,\n        isLoading: true,\n        isSpinner: false,\n        loaderMsg: loaderMsg.greeting,\n        data: {},\n\n    };\n\n    componentDidMount() {\n        const firstTab = newsData.CATEGORIES[0];\n\n        this.setTab(firstTab)();\n    }\n\n    setTab = (currentTab) => () => {\n        this.setState({isLoading: true});\n\n        loadCategory(currentTab)\n            .then(data => {\n                this.setState({\n                    currentTab: currentTab,\n                    isLoading: false,\n                    isSpinner: true,\n                    loaderMsg: loaderMsg.spinner,\n                    data: data\n                });\n            })\n            .catch(() => {\n                this.setState({\n                    isLoading: true,\n                    isSpinner: false,\n                    loaderMsg: loaderMsg.error,\n                })\n            })\n    };\n\n    render() {\n        const {currentTab, isLoading, isSpinner, loaderMsg, data } = this.state;\n\n        if (isLoading) {\n            return <Preloader isSpinner={isSpinner} msg={loaderMsg}/>\n        } else {\n            return (\n                <React.Fragment>\n                    <CategoryTabs currentTab={currentTab} setTab={this.setTab} />\n                    <Content data={data} />\n                </React.Fragment>\n            )\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles/style.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst wrapper = document.getElementById('root');\n\nReactDOM.render(<App />, wrapper);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}